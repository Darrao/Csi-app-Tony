import { Body, Controller, Post, NotFoundException } from '@nestjs/common';
import { sendMail, generateToken, sendMailWithCC, sendMailDynamic } from './email.service';
import { TokenService } from '../token/token.service';
import { DoctorantService } from '../doctorant/doctorant.service'; // ‚ûï Import du service
import { generateReferentToken, verifyTokenAndFindDoctorant } from './email.service';
import { EmailConfigService } from '../emailConfig/email-config.service';

@Controller('email')
export class EmailController {
    constructor(
        private readonly tokenService: TokenService,
        private readonly doctorantService: DoctorantService, // ‚ûï Injection du service
        private readonly emailConfigService: EmailConfigService
    ) {}

    @Post('send')
    async sendEmails(
        @Body('emails') emails: string[],
        @Body('doctorantPrenom') doctorantPrenom: string,
        @Body('doctorantEmail') doctorantEmail: string,
        @Body('directeurTheseEmail') directeurTheseEmail: string
    ) {
        console.log('Route /email/send appel√©e avec emails :', emails);
        console.log('Doctorant pr√©nom :', doctorantPrenom);
        console.log('Directeur de Th√®se (CC) :', directeurTheseEmail);

        try {
            // üîç R√©cup√©ration de la configuration email depuis la BDD
            const emailConfig = await this.emailConfigService.getEmailConfig();
            if (!emailConfig) {
                throw new NotFoundException('Configuration email introuvable.');
            }

            console.log(`‚úÖ Configuration email r√©cup√©r√©e.`);

            // üîç R√©cup√©ration des donn√©es du doctorant
            const doctorant = await this.doctorantService.findByEmail(doctorantEmail);
            if (!doctorant) {
                return { message: "Doctorant introuvable." };
            }

            console.log(`‚úÖ Doctorant trouv√© : ${doctorant.nom} ${doctorant.prenom}, Email: ${doctorant.email}`);

            // üìÑ G√©n√©ration du PDF
            const pdfBuffer = await this.doctorantService.generateNewPDF(doctorant);
            const pdfFileName = `Rapport_${doctorant.nom}_${doctorant.prenom}.pdf`;

            // üîó G√©n√©ration des liens dynamiques
            const presentationTemplate = emailConfig.presentationTemplate;
            const csiProposalLink = emailConfig.csiProposalLink;
            const contactLink = emailConfig.contactLink;

            for (const email of emails) {
                console.log(`Traitement de l'email : ${email}`);

                // üè∑ G√©n√©ration du token
                const token = await generateToken(email, this.doctorantService, doctorantEmail);
                await this.tokenService.saveToken(token, email, 'doctorant');

                const link = `http://localhost:3001/formulaire?token=${token}`;

                // üîÑ Remplacement des variables dans le template `formCsiMember`
                const emailTemplate = emailConfig.formCsiMember;
                const emailContent = this.emailConfigService.replaceEmailVariables(emailTemplate, {
                    doctorantPrenom,
                    link,
                    presentationTemplate,
                    csiProposalLink,
                    contactLink
                });

                const subject = `CSI Evaluation for ${doctorantPrenom}`;
                const attachments = [{ filename: pdfFileName, content: pdfBuffer, contentType: 'application/pdf' }];

                console.log(`üìß Envoi de l'email √† : ${email}`);
                await sendMail(email, subject, emailContent, attachments);
                console.log(`‚úÖ Email envoy√© √† : ${email}`);
            }

            // üî• Mise √† jour du statut dans la base
            if (doctorant && doctorant._id instanceof Object) {
                await this.doctorantService.updateDoctorant(doctorant._id.toString(), {
                    sendToRepresentants: true,
                    NbSendToRepresentants: (doctorant.NbSendToRepresentants || 0) + 1
                });
            } else {
                console.error("‚ùå Erreur: `doctorant._id` est invalide :", doctorant);
            }

            // üè∑ G√©n√©ration du token pour le doctorant
            const doctorantToken = await generateToken(doctorantEmail, this.doctorantService, doctorantEmail);
            await this.tokenService.saveToken(doctorantToken, doctorantEmail, 'doctorant');

            const doctorantLink = `http://localhost:3001/formulaire?token=${doctorantToken}`;

            // üîÑ Remplacement des variables dans le template `doctorantSubmit`
            const doctorantTemplate = emailConfig.doctorantSubmit;
            const doctorantContent = this.emailConfigService.replaceEmailVariables(doctorantTemplate, {
                doctorantPrenom,
                doctorantLink,
                presentationTemplate,
                csiProposalLink,
                contactLink
            });

            const doctorantSubject = `Your CSI Annual Report - ${doctorantPrenom}`;
            const doctorantAttachments = [{ filename: pdfFileName, content: pdfBuffer, contentType: 'application/pdf' }];

            console.log(`üìß Envoi de l'email au doctorant : ${doctorantEmail}`);
            console.log(`üìß Envoi de l'email au directeur de th√®se : ${directeurTheseEmail}`);

            await sendMailWithCC(doctorantEmail, doctorantSubject, doctorantContent, doctorantAttachments, directeurTheseEmail);

            console.log(`‚úÖ Email envoy√© au doctorant : ${doctorantEmail}`);

            return { message: 'Emails envoy√©s avec succ√®s.' };
        } catch (error) {
            console.error('‚ùå Erreur dans la route /email/send :', error.message);
            return { message: 'Erreur lors de l\'envoi des emails.', error: error.message };
        }
    }

    @Post('/validate-token')
    async validateToken(@Body('token') token: string) {
        console.log(`üîç Validation du token JWT : ${token}`);

        // üî• R√©cup√©ration correcte du doctorant via le token
        const doctorant = await verifyTokenAndFindDoctorant(token, this.doctorantService);

        if (!doctorant) {
            throw new NotFoundException('Aucun doctorant trouv√© avec cet email.');
        }

        console.log(`‚úÖ Doctorant trouv√© : ${doctorant.email}`);
        return { message: 'Token valide', doctorant };
    }

    // Il va falloirt rajouter cc attendre les instructions de Tony
    @Post('send-department')
    async sendEmailByDepartment(
        @Body('doctorantId') doctorantId: string,
        @Body('doctorantEmail') doctorantEmail: string,
        @Body('doctorantPrenom') doctorantPrenom: string,
        @Body('doctorantNom') doctorantNom: string,
        @Body('department') department: string
    ) {
        try {
            // üîç R√©cup√©ration de la configuration email depuis la BDD
            const emailConfig = await this.emailConfigService.getEmailConfig();
            if (!emailConfig) {
                throw new NotFoundException('Configuration email introuvable.');
            }

            console.log(`‚úÖ Configuration email r√©cup√©r√©e.`);

            // üîç R√©cup√©ration du doctorant
            const doctorant = await this.doctorantService.findOne(doctorantId);
            if (!doctorant) {
                throw new NotFoundException("Doctorant introuvable.");
            }

            console.log(`‚úÖ Doctorant trouv√© : ${doctorant.nom} ${doctorant.prenom}`);

            // üéØ R√©cup√©ration des destinataires pour le d√©partement
            const departmentGroup = emailConfig[department as keyof EmailConfigService] as { recipient: string[]; cc: string[] };
            if (!departmentGroup) {
                throw new NotFoundException(`Aucun destinataire d√©fini pour le d√©partement : ${department}`);
            }

            const recipientEmails = departmentGroup.recipient;
            const ccEmails = departmentGroup.cc;

            if (recipientEmails.length === 0) {
                throw new NotFoundException(`Aucun email de destinataire d√©fini pour ${department}.`);
            }

            console.log(`üì¨ Destinataires principaux : ${recipientEmails.join(', ')}`);
            console.log(`üì¨ En copie (CC) : ${ccEmails.join(', ')}`);

            // üè∑Ô∏è G√©n√©ration du token pour le formulaire
            const token = await generateToken(doctorantEmail, this.doctorantService, doctorantEmail);
            const link = `http://localhost:3001/formulaire?token=${token}`;

            // üìÑ G√©n√©ration du PDF
            const pdfBuffer = await this.doctorantService.generateNewPDF(doctorant);
            const pdfFileName = `Rapport_${doctorant.nom}_${doctorant.prenom}.pdf`;

            // ‚úâÔ∏è Construction du contenu de l'email depuis la config
            const emailTemplate = emailConfig.CsiMemberHasSubmitForDirector;

            // üè∑ Remplacement des variables dynamiques via emailConfigService
            const emailContent = this.emailConfigService.replaceEmailVariables(emailTemplate, {
                department,
                doctorantPrenom,
                doctorantNom,
                doctorantEmail,
                link, // Ajoute d'autres variables si n√©cessaire
            });
            
            const subject = `Evaluation CSI - ${doctorantPrenom}`;

            const attachments = [
                {
                    filename: pdfFileName,
                    content: pdfBuffer,
                    contentType: 'application/pdf',
                },
            ];

            console.log(`üìß Envoi de l'email aux destinataires...`);
            await sendMailDynamic(recipientEmails, subject, emailContent, attachments, ccEmails);

            // üî• Mise √† jour du statut dans la base pour les repr√©sentants et le directeur
            if (doctorant && doctorant._id instanceof Object) {
                await this.doctorantService.updateDoctorant(doctorant._id.toString(), {
                    gestionnaireDirecteurValide: true,
                });
            } else {
                console.error("‚ùå Erreur: `doctorant._id` est invalide :", doctorant);
            }

            return { message: `Email envoy√© avec succ√®s √† ${recipientEmails.join(', ')}` };
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'envoi de l\'email :', error.message);
            throw new NotFoundException('Erreur lors de l\'envoi de l\'email.');
        }
    }

    @Post('send-referent-confirmation')
    async sendReferentConfirmation(
        @Body('doctorantId') doctorantId: string,
        @Body('doctorantEmail') doctorantEmail: string,
        @Body('doctorantPrenom') doctorantPrenom: string,
        @Body('doctorantNom') doctorantNom: string
    ) {
        try {
            // üîç R√©cup√©ration de la configuration email depuis la BDD
            const emailConfig = await this.emailConfigService.getEmailConfig();
            if (!emailConfig) {
                throw new NotFoundException('Configuration email introuvable.');
            }

            console.log(`‚úÖ Configuration email r√©cup√©r√©e.`);

            // üîç R√©cup√©ration du doctorant
            const doctorant = await this.doctorantService.findOne(doctorantId);
            if (!doctorant) {
                throw new NotFoundException("Doctorant introuvable.");
            }

            console.log(`‚úÖ Doctorant trouv√© : ${doctorant.nom} ${doctorant.prenom}`);

            // üì© R√©cup√©ration des emails des r√©f√©rents
            const referents = [doctorant.emailMembre1, doctorant.emailMembre2, doctorant.emailAdditionalMembre]
                .filter(email => email); // ‚ö†Ô∏è Supprime les valeurs nulles

            if (referents.length === 0) {
                console.warn("‚ö†Ô∏è Aucun r√©f√©rent trouv√© pour ce doctorant.");
                return { message: "Aucun r√©f√©rent √† notifier." };
            }

            console.log(`üì¨ R√©f√©rents √† notifier : ${referents.join(", ")}`);

            // üìÑ G√©n√©ration du PDF
            const pdfBuffer = await this.doctorantService.generateNewPDF(doctorant);
            const pdfFileName = `Rapport_${doctorant.nom}_${doctorant.prenom}.pdf`;

            // üìù R√©cup√©ration du template d'email
            const emailTemplate = emailConfig.thanksForSubmitCsiMember;

            // üîÑ Remplacement des variables dynamiques
            const emailContent = this.emailConfigService.replaceEmailVariables(emailTemplate, {
                doctorantPrenom,
                doctorantNom,
                doctorantEmail
            });

            const subject = `Final CSI Report - ${doctorantPrenom} ${doctorantNom}`;
            const attachments = [{ filename: pdfFileName, content: pdfBuffer, contentType: 'application/pdf' }];

            // üîÑ Envoi des emails aux r√©f√©rents
            for (const referentEmail of referents) {
                console.log(`üìß Envoi de l'email √† ${referentEmail}`);
                await sendMail(referentEmail, subject, emailContent, attachments);
            }

            return { message: `Emails envoy√©s avec succ√®s aux r√©f√©rents : ${referents.join(', ')}` };
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'envoi de l\'email aux r√©f√©rents :', error.message);
            throw new NotFoundException('Erreur lors de l\'envoi de l\'email aux r√©f√©rents.');
        }
    }
}